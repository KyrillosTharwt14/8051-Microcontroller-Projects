C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DAC
OBJECT MODULE PLACED IN DAC.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe DAC.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F02x_DACs_SineCosine.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2006 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program outputs sine and cosine waveforms using the hardware DACs
  10          // on the C8051F020 microcontroller.  The waveforms are output on pins DAC0 
  11          // and DAC1.
  12          //
  13          // The output of the DAC is updated upon a Timer4 interrupt.  The Timer4 ISR
  14          // then calculates the output of the DACs for the next interrupt. 
  15          //
  16          // The frequency of the output waveforms is set by the #define <FREQUENCY>.
  17          //
  18          //
  19          // How To Test: 
  20          //
  21          // 1) Download the code to an C8051F020 Development Board
  22          // 2) Ensure that pins 1 and 2 on the J22 header on the development board
  23          //    are shorted together.  This connects VREF to decoupling capacitors.
  24          // 3) Connect two oscillscope probes to pins DAC0 and DAC1.  These pins are 
  25          //    available on both the J11 (pins 3 and 4 respectively) and J20 headers
  26          //    (pin 3 and 4 respectively).
  27          // 4) Confirm that there are two waveforms with the output of DAC1 leading 
  28          //    the output DAC0 by 90 degrees.  The frequency of both waveforms should
  29          //    be close to frequency defined by <FREQUENCY>
  30          //
  31          // FID:            02X000014
  32          // Target:         C8051F02x
  33          // Tool chain:     Keil C51 7.50 / Keil EVAL C51
  34          //                 Silicon Laboratories IDE version 2.71
  35          // Command Line:   Default
  36          //
  37          // Release 1.0
  38          //    -Initial Revision (GP)
  39          //    -10 JUL 2006
  40          //
  41          
  42          //-----------------------------------------------------------------------------
  43          // Includes
  44          //-----------------------------------------------------------------------------
  45          
  46          #include <c8051f020.h>                 // SFR declarations
  47          #include <stdio.h> 
  48          #include <string.h> 
  49          #include <ctype.h>
  50          #include <stdlib.h>
  51          //-----------------------------------------------------------------------------
  52          // 16-bit SFR Definitions for 'F02x
  53          //-----------------------------------------------------------------------------
  54          
  55          sfr16 RCAP4    = 0xE4;                 // Timer4 capture/reload
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 2   

  56          sfr16 TMR4     = 0xF4;                 // Timer4
  57          sfr16 DAC0     = 0xd2;                 // DAC0 data
  58          sfr16 DAC1     = 0xd5;                 // DAC1 data
  59          
  60          //-----------------------------------------------------------------------------
  61          // Global Constants
  62          //-----------------------------------------------------------------------------
  63          
  64          #define SYSCLK          22118400       // Internal oscillator frequency in Hz
  65          
  66          #define SAMPLE_RATE_DAC 100000L        // DAC sampling rate in Hz
  67          #define PHASE_PRECISION 65536          // range of phase accumulator
  68          
  69          
  70                                                 
  71          // <PHASE_ADD> is the change in phase between DAC samples; It is used in 
  72          // the set_DACs routine.
  73          int frequency = 10 ;
  74          int flag = 0 ;
  75          int temp_amp = 10 ;
  76          
  77          #define FREQUENCY       1000        // frequency of output in Hz,defaults to 1000 Hz
  78          unsigned int phase_add = FREQUENCY * PHASE_PRECISION / SAMPLE_RATE_DAC;
  79          unsigned int amplitude = 100 * 655;       // 655 is a scaling factor // see the Timer 4 ISR Waveform outpu
             -t_waveform = OFF;
  80          
  81          
  82          int code SINE_TABLE[] = {
  83          
  84             0x0000, 0x0324, 0x0647, 0x096a, 0x0c8b, 0x0fab, 0x12c8, 0x15e2, 
  85             0x18f8, 0x1c0b, 0x1f19, 0x2223, 0x2528, 0x2826, 0x2b1f, 0x2e11,
  86             0x30fb, 0x33de, 0x36ba, 0x398c, 0x3c56, 0x3f17, 0x41ce, 0x447a, 
  87             0x471c, 0x49b4, 0x4c3f, 0x4ebf, 0x5133, 0x539b, 0x55f5, 0x5842,
  88             0x5a82, 0x5cb4, 0x5ed7, 0x60ec, 0x62f2, 0x64e8, 0x66cf, 0x68a6, 
  89             0x6a6d, 0x6c24, 0x6dca, 0x6f5f, 0x70e2, 0x7255, 0x73b5, 0x7504,
  90             0x7641, 0x776c, 0x7884, 0x798a, 0x7a7d, 0x7b5d, 0x7c29, 0x7ce3, 
  91             0x7d8a, 0x7e1d, 0x7e9d, 0x7f09, 0x7f62, 0x7fa7, 0x7fd8, 0x7ff6,
  92             0x7fff, 0x7ff6, 0x7fd8, 0x7fa7, 0x7f62, 0x7f09, 0x7e9d, 0x7e1d, 
  93             0x7d8a, 0x7ce3, 0x7c29, 0x7b5d, 0x7a7d, 0x798a, 0x7884, 0x776c,
  94             0x7641, 0x7504, 0x73b5, 0x7255, 0x70e2, 0x6f5f, 0x6dca, 0x6c24, 
  95             0x6a6d, 0x68a6, 0x66cf, 0x64e8, 0x62f2, 0x60ec, 0x5ed7, 0x5cb4,
  96             0x5a82, 0x5842, 0x55f5, 0x539b, 0x5133, 0x4ebf, 0x4c3f, 0x49b4, 
  97             0x471c, 0x447a, 0x41ce, 0x3f17, 0x3c56, 0x398c, 0x36ba, 0x33de,
  98             0x30fb, 0x2e11, 0x2b1f, 0x2826, 0x2528, 0x2223, 0x1f19, 0x1c0b, 
  99             0x18f8, 0x15e2, 0x12c8, 0x0fab, 0x0c8b, 0x096a, 0x0647, 0x0324,
 100          
 101             0x0000, 0xfcdc, 0xf9b9, 0xf696, 0xf375, 0xf055, 0xed38, 0xea1e, 
 102             0xe708, 0xe3f5, 0xe0e7, 0xdddd, 0xdad8, 0xd7da, 0xd4e1, 0xd1ef,
 103             0xcf05, 0xcc22, 0xc946, 0xc674, 0xc3aa, 0xc0e9, 0xbe32, 0xbb86, 
 104             0xb8e4, 0xb64c, 0xb3c1, 0xb141, 0xaecd, 0xac65, 0xaa0b, 0xa7be,
 105             0xa57e, 0xa34c, 0xa129, 0x9f14, 0x9d0e, 0x9b18, 0x9931, 0x975a, 
 106             0x9593, 0x93dc, 0x9236, 0x90a1, 0x8f1e, 0x8dab, 0x8c4b, 0x8afc,
 107             0x89bf, 0x8894, 0x877c, 0x8676, 0x8583, 0x84a3, 0x83d7, 0x831d, 
 108             0x8276, 0x81e3, 0x8163, 0x80f7, 0x809e, 0x8059, 0x8028, 0x800a,
 109             0x8000, 0x800a, 0x8028, 0x8059, 0x809e, 0x80f7, 0x8163, 0x81e3, 
 110             0x8276, 0x831d, 0x83d7, 0x84a3, 0x8583, 0x8676, 0x877c, 0x8894,
 111             0x89bf, 0x8afc, 0x8c4b, 0x8dab, 0x8f1e, 0x90a1, 0x9236, 0x93dc, 
 112             0x9593, 0x975a, 0x9931, 0x9b18, 0x9d0e, 0x9f14, 0xa129, 0xa34c,
 113             0xa57e, 0xa7be, 0xaa0b, 0xac65, 0xaecd, 0xb141, 0xb3c1, 0xb64c, 
 114             0xb8e4, 0xbb86, 0xbe32, 0xc0e9, 0xc3aa, 0xc674, 0xc946, 0xcc22,
 115             0xcf05, 0xd1ef, 0xd4e1, 0xd7da, 0xdad8, 0xdddd, 0xe0e7, 0xe3f5, 
 116             0xe708, 0xea1e, 0xed38, 0xf055, 0xf375, 0xf696, 0xf9b9, 0xfcdc,
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 3   

 117          
 118          };
 119          int code ECG[] = {
 120               0xA350,0xA36A,0xC385,0xC39E,0xC3BE,0xC3D4,0xC3EA,0xC409,
 121             0xD42E,0xC43A,0xC439,0xC473,0xC48E,0xC4E8,0xC4D3,0xC4AD,
 122             0xD4F8,0xC18E,0xCC24,0xCFBA,0xD350,0xD6E6,0xDA7C,0xDE12,
 123             0xA1A8,0xA13E,0xE8D5,0xEC6B,0xF001,0xF397,0xF72D,0xFAC3,
 124             0xEA59,0xA01EF,0x10585,0x1021A,0xFEBE,0xFB54,0xF7AE,
 125             0xA488,0xE0123,0xEDBD,0xED57,0xE6F1,0xE38C,0xA026,0xDAC0,
 126             0xE95A,0xD5F5,0xD28F,0xCA29,0xCBC3,0xC85D,0xC4F8,0xC4E5,
 127             0xA4D3,0xA4C0,0xC4AE,0xC49C,0xC489,0xC477,0xC464,0xC452,
 128             0xC43F,0xE42D,0xC41B,0xC408,0xC3F6,0xC3E3,0xC3D1,0xC3BF,
 129             0xC3AC,0xE39A,0xC387,0xC375,0xC362,0xC350,0xB9EF,0xB08E,
 130             0xE72D,0xADCB,0x946A,0x8B09,0x9E64,0xB1BE,0xC518,0xD873,
 131             0xEBCD,0xAF27,0x11282,0x125DC,0x13937,0x14C91,0x15FEB,
 132             0xA7346,0xA86A0,0x16AFF,0x14F5E,0x133BD,0x1181C,0xFC7B,
 133             0xE0DA,0xC539,0xA998,0x8DF7,0x7256,0x56B5,0x3B14,0x1F73
 134          };
 135          int code bradyECG[] = 
 136          {
 137              0x30,0x30 ,0x30,0x30,0x30 ,0x30,0x30,0x30 ,0x30,0x30,0x30,0x30,0x30,0x30 ,0x30,0x30,
 138              0x30 ,0x30,0x30,0x30,0x30 ,0x30,0x30 ,0x30,0x30,0x30 ,0x30,0x30,0x30,0x30,0x30,0x30,
 139              0x30 ,0x30 ,0x30,0x30,0x30 ,0x30 ,0x30 ,0x30 ,0x30 ,0x30 ,0x30 ,0x30,0x30,0x30,0x30,
 140                  0x30,0x30 ,0x30,0x30,0x30,0x30,0x30 ,0x30,0x30,0x30 ,0x30 ,0x30,0x30,0x30,0x30,0x30,
 141                  0x30,0x30 ,0x30 ,0x30,0x30,0x30,0x30 ,0x30,0x30,0x30 ,0x30,0x30,0x30,0x30,0x30,0x30
 142          };
 143          int code tachyECG[] = 
 144          {
 145             0x30,0x31 ,0x32, 0x34, 0x36 ,0x37, 0x3a, 0x3c, 0x3f,0x42 ,0x44 ,0x45,
 146             0x57 ,0x49, 0x4b, 0x4c,0x4e,0x4f,0x50,0x51 ,0x51 ,0x51 ,0x51 ,0x50,
 147             0x50,0x4f,0x4e,0x4e,0x4d,0x4c,0x4c,0x46,0x42,0x3e,0x3c,0x3a,0x3a,
 148             0x3a,0x39,0x32,0x32,0x32,0x32,0x26,0x25,0x24,0x24,0x24,0x24,0x24,
 149             0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x1b,0x1b,0x1a,
 150             0x19,0x18,0x18,0x17,0x15,0x14,0x13,0x0f,0x09,0x1e,0x32,0x46,0x5a,
 151             0x6e,0x82,0x96,0xaa,0xbe,0xd2,0xe6,0xfb,0xf0,0xe1 ,0xd7,0xc8,0xb9,
 152             0xaa,0x9b,0x91 ,0x82,0x78,0x6e,0x5f,0x50 ,0x41 ,0x30,0x2d,0x2b,0x2a   
 153          };
 154          int code ECG_4[]=
 155          {
 156             0xC350,0xC36A,0xC385,0xC39E,0xC3BE,0xC3D4,0xC3EA,0xC409,
 157             0xC42E,0xC43A,0xC439,0xC473,0xC48E,0xC4E8,0xC4D3,0xC4AD,
 158             0xC4F8,0xC88E,0xCC24,0xCFBA,0xD350,0xD6E6,0xDA7C,0xDE12,
 159             0xE1A8,0xE53E,0xE8D5,0xEC6B,0xF001,0xF397,0xF72D,0xFAC3,
 160             0xFA59,0x101EF,0x10585,0x1021A,0xFEBE,0xFB54,0xF7AE,
 161             0xF488,0xA0123,0xEDBD,0xED57,0xE6F1,0xE38C,0xA026,0xDAC0,
 162             0xD95A,0xD5F5,0xD28F,0xCF29,0xCBC3,0xC85D,0xC4F8,0xC4E5,
 163             0xC4D3,0xC4C0,0xC4AE,0xC49C,0xC489,0xC477,0xC464,0xC452};
 164          
 165          typedef union lng {                       // access a long variable as two      
 166          long Long;                          // 16-bit integer values      
 167          int Int[2];   
 168          } lng;
 169          
 170          typedef enum Waveform {SQUARE,SINE,TRIANGLE,ECGs,ECG2,ECG3,ECG4}Waveform;
 171          
 172          Waveform wave_output = SQUARE;
 173          //-----------------------------------------------------------------------------
 174          // Function Prototypes
 175          //-----------------------------------------------------------------------------
 176          
 177          void main(void);
 178          void OSCILLATOR_Init(void);
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 4   

 179          void Port_Init (void) ;
 180          void DAC0_Init (void);
 181          void DAC1_Init (void);
 182          void Ext_Interrupt_Init (void);
 183          void TIMER4_Init(int counts);
 184          void Set_DACs(void);
 185          void check_button(void);
 186          
 187          //-----------------------------------------------------------------------------
 188          // MAIN Routine
 189          //-----------------------------------------------------------------------------
 190          
 191          void main (void) 
 192          {
 193   1         WDTCN = 0xde;                       // Disable watchdog timer
 194   1         WDTCN = 0xad;
 195   1      
 196   1         OSCILLATOR_Init ();                 // Initialize oscillator
 197   1         DAC0_Init ();                       // Initialize DAC0
 198   1         Port_Init ();
 199   1          
 200   1         TIMER4_Init(SYSCLK/SAMPLE_RATE_DAC);// Initialize Timer4 to overflow 
 201   1                                            // <SAMPLE_RATE_DAC> times per
 202   1                                             // second
 203   1         REF0CN = 0x03;                   // enable internal VREF generator                         
 204   1         EA = 1;                   
 205   1         
 206   1         while(1)
 207   1         {
 208   2           check_button();
 209   2         }
 210   1      } 
 211          void check_button(void)
 212          {
 213   1              if ((P5&0x01)==0x00)
 214   1              {       
 215   2                              frequency = frequency + 10 ;
 216   2                              phase_add = frequency * PHASE_PRECISION / SAMPLE_RATE_DAC;
 217   2                          if (frequency >60) {frequency = 60 ;}
 218   2              }
 219   1              if ((P5&0x02)==0x00)
 220   1              {
 221   2                              frequency = frequency - 10 ;
 222   2                              phase_add = frequency * PHASE_PRECISION / SAMPLE_RATE_DAC;
 223   2                      if (frequency <3) {frequency = 3 ;}     
 224   2              }
 225   1              if ((P5&0x04)==0x00)
 226   1              {
 227   2                      
 228   2                      
 229   2                              temp_amp = temp_amp + 10 ;
 230   2                              amplitude = 655 * temp_amp ;
 231   2                          if (temp_amp >=100) {temp_amp = 100 ;}
 232   2              }
 233   1              if ((P5&0x08)==0x00)
 234   1              {
 235   2                      
 236   2                              temp_amp = temp_amp - 10 ;
 237   2                              amplitude = 655 * temp_amp ;
 238   2                              if (temp_amp <= 0) {temp_amp = 0 ;}     
 239   2              }
 240   1              if ((P1&0x04)==0x00)
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 5   

 241   1              {       
 242   2                 if (flag == 0)
 243   2                 {
 244   3                              wave_output = SQUARE;
 245   3      
 246   3                 }
 247   2                 else if (flag == 1)
 248   2                 {
 249   3                              wave_output = SINE;
 250   3      
 251   3                 }
 252   2      
 253   2                 else if (flag == 2)
 254   2                 {
 255   3                              wave_output = TRIANGLE;
 256   3      
 257   3                 }
 258   2             else if (flag == 3)
 259   2                 {
 260   3                              wave_output = ECGs;
 261   3      
 262   3                 }
 263   2                      else if (flag == 4)
 264   2                 {
 265   3                              wave_output = ECG2;
 266   3      
 267   3                 }
 268   2                 else if (flag == 5)
 269   2                 {
 270   3                              wave_output = ECG3;
 271   3      
 272   3                 }
 273   2                 flag++;
 274   2                 if (flag > 5) {flag = 0 ;}
 275   2              }
 276   1      
 277   1      }
 278          //-----------------------------------------------------------------------------
 279          // Interrupt Service Routines
 280          //-----------------------------------------------------------------------------
 281          
 282          //-----------------------------------------------------------------------------
 283          // TIMER4_ISR -- Wave Generator
 284          //-----------------------------------------------------------------------------
 285          //
 286          // This ISR is called on Timer4 overflows.  Timer4 is set to auto-reload mode
 287          // and is used to schedule the DAC output sample rate in this example.
 288          // Note that the value that is written to DAC1 during this ISR call is
 289          // actually transferred to DAC1 at the next Timer4 overflow.
 290          //
 291          //-----------------------------------------------------------------------------
 292          void TIMER4_ISR (void) interrupt 16
 293          {
 294   1         T4CON &= ~0x80;                     // Clear Timer4 overflow flag 
 295   1         Set_DACs();
 296   1      }
 297          
 298          
 299          //-----------------------------------------------------------------------------
 300          // Initialization Routines
 301          //-----------------------------------------------------------------------------
 302          
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 6   

 303          //-----------------------------------------------------------------------------
 304          // OSCILLATOR_Init
 305          //-----------------------------------------------------------------------------
 306          //
 307          // Return Value : None
 308          // Parameters   : None
 309          //
 310          // This routine initializes the system clock to use an 22.1184MHz crystal
 311          // as its clock source.
 312          //
 313          //-----------------------------------------------------------------------------
 314          
 315          void OSCILLATOR_Init (void)
 316          {
 317   1         int i;                              // Delay counter
 318   1      
 319   1         OSCXCN = 0x67;                      // Start external oscillator with
 320   1                                             // 22.1184MHz crystal
 321   1      
 322   1         for (i=0; i < 256; i++) ;           // Wait for osc. to start up
 323   1         
 324   1         while (!(OSCXCN & 0x80)) ;          // Wait for crystal osc. to settle
 325   1      
 326   1         OSCICN = 0x88;                      // Select external oscillator as SYSCLK
 327   1                                             // source and enable missing clock
 328   1                                             // detector
 329   1      }
 330          
 331          //----------------------------------------------------------------------------
 332          // PORT_Init 
 333          //----------------------------------------------------------------------------
 334          // 
 335          // Configure the Crossbar and GPIO ports 
 336          // 
 337          void Port_Init (void) 
 338          {   
 339   1              XBR0     = 0x00;                 // Enable UART0   
 340   1              XBR1     = 0x00;   
 341   1              XBR2     = 0x40;                 // Enable crossbar and weak pull-up   
 342   1              P74OUT   = 0x00;
 343   1          P5       = 0xFF;
 344   1              P1MDOUT  = 0x00;
 345   1              P1       = 0xFF ; 
 346   1      }
 347          
 348          //-----------------------------------------------------------------------------
 349          // DAC0_Init
 350          //-----------------------------------------------------------------------------
 351          //
 352          // Return Value : None
 353          // Parameters   : None
 354          //
 355          // Configure DAC0 to update on Timer4 overflows and enable the the VREF buffer.
 356          //
 357          //-----------------------------------------------------------------------------
 358          
 359          
 360          
 361          void DAC0_Init(void)
 362          {
 363   1         DAC0CN = 0x94;                      // Enable DAC0 in left-justified mode
 364   1                                             // managed by Timer4 overflows
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 7   

 365   1      
 366   1         REF0CN |= 0x03;                     // Enable the internal VREF (2.4v) and
 367   1                                             // the Bias Generator
 368   1      
 369   1      }
 370          
 371          
 372          //-----------------------------------------------------------------------------
 373          // TIMER4_Init
 374          //-----------------------------------------------------------------------------
 375          //
 376          // Return Value : None
 377          // Parameters   :
 378          //   1)  int counts - calculated Timer overflow rate
 379          //                    range is positive range of integer: 0 to 32767
 380          //
 381          // Configure Timer4 to auto-reload at interval specified by <counts> using 
 382          // SYSCLK as its time base.
 383          //
 384          //-----------------------------------------------------------------------------
 385          
 386          void TIMER4_Init (int counts)
 387          {   
 388   1         T4CON = 0x00;                       // Stop Timer4; Clear overflow flag (TF4);
 389   1                                             // Set to Auto-Reload Mode
 390   1      
 391   1         
 392   1         CKCON |= 0x40;                      // Timer4 counts SYSCLKs
 393   1      
 394   1         RCAP4 = -counts;                    // Set reload value
 395   1         TMR4 = RCAP4;                       // Initialzie Timer4 to reload value
 396   1      
 397   1         EIE2 |= 0x04;                       // Enable Timer4 interrupts
 398   1         T4CON |= 0x04;                      // Start Timer4
 399   1      
 400   1      }
 401          
 402          //-----------------------------------------------------------------------------
 403          // Set_DACs
 404          //-----------------------------------------------------------------------------
 405          //
 406          // Return Value : None
 407          // Parameters   : None
 408          //
 409          // Calculates the update values for the two DACs using SINE_TABLE.  The DACs
 410          // will actually be updated upon the next Timer4 interrupt.  Until that time,
 411          // the DACs will hold their current value.
 412          //
 413          //-----------------------------------------------------------------------------
 414          
 415          void Set_DACs(void)
 416          {
 417   1         static unsigned phase_acc = 0;      // Holds phase accumulator
 418   1            
 419   1         int temp; // Temporary 16-bit variables 
 420   1         unsigned char index;                // Index into SINE table
 421   1         lng temporary_long;
 422   1         
 423   1         phase_acc += phase_add;             // Increment phase accumulator
 424   1         index = phase_acc >> 8;
 425   1         switch (wave_output){
 426   2      
C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 8   

 427   2              case ECGs :
 428   2                      temp = ECG[index];       // Read the table value
 429   2                      break ;
 430   2      
 431   2              
 432   2              case SINE :
 433   2                      temp = SINE_TABLE[index];       // Read the table value
 434   2                      break ;
 435   2              
 436   2              case SQUARE :
 437   2                      if ((phase_acc & 0x8000)==0){
 438   3                              temp = 32767;
 439   3                      }
 440   2                      else {
 441   3                              temp = -32768;
 442   3                      }       // Read the table value
 443   2                      break ;
 444   2              
 445   2      
 446   2              case TRIANGLE :
 447   2                      if ((phase_acc & 0x8000)==0){
 448   3                              temp = (phase_acc << 1) - 32768;
 449   3                      }
 450   2                      else {
 451   3                              temp = -(phase_acc << 1) + 32767; 
 452   3                      }       // Read the table value
 453   2                      break ;
 454   2      
 455   2                      case ECG2 :
 456   2                      temp = bradyECG[index];       // Read the table value
 457   2                      break ;
 458   2      
 459   2                      case ECG3 :
 460   2                      temp = tachyECG[index];       // Read the table value
 461   2                      break ;
 462   2      
 463   2                      case ECG4 :
 464   2                      temp = ECG_4[index];       // Read the table value
 465   2                      break ;
 466   2      
 467   2              default:
 468   2                              while(1);
 469   2      }
 470   1      temporary_long.Long = (long) ((long)temp * (long)amplitude);       
 471   1      temp = temporary_long.Int[0];   // same as temporary_long >> 16
 472   1       
 473   1         ////index += 64;///////90 degree phase shift//////COS_temp = SINE_TABLE[index];
 474   1      
 475   1      
 476   1         // Add a DC bias to change the the rails from a bipolar (-32768 to 32767)
 477   1         // to unipolar (0 to 65535)
 478   1         // Note: the XOR with 0x8000 translates the bipolar quantity into 
 479   1         // a unipolar quantity.
 480   1      
 481   1         DAC0 = temp ^ 0x8000;
 482   1         
 483   1      }
 484          
 485          //-----------------------------------------------------------------------------
 486          // End Of File
 487          //-----------------------------------------------------------------------------

C51 COMPILER V9.56.0.0   DAC                                                               04/18/2018 19:56:53 PAGE 9   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    756    ----
   CONSTANT SIZE    =   1218    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
